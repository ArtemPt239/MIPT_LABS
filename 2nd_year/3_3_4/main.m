%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\local\Mipt\Lab\2nd_year\3_3_4\data.xls
%    Worksheet: ??????????
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2018/09/21 18:53:49

%% Import the data
[~, ~, raw] = xlsread('C:\local\Mipt\Lab\2nd_year\3_3_4\data.xlsx','Calibration');
raw = raw(6:16,[3,end-1,end]);
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

%% Exclude rows with non-numeric cells
R = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),2); 
raw(R,:) = [];
%% Create output variable
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names
I = data(:,1);
B = data(:,2);
err_B = data(:,3);
%% Clear temporary variables
clearvars data raw R;

err_I = 0.005*ones(length(I),1);

% Calibration
[f,gof] = fit(I,B,'Poly3');
plot(f);
hold on
make_fancy('Current [A]', 'Magnetic induction [mT]', 'Calibration');
errorbar(I,B,err_B,err_B,err_I,err_I,'LineStyle','none','CapSize', 0);
legend("fitted curve",'data','Location','northwest');
xlim([0 1.8])
ylim([0 1000])
hold off
print('CalibrationPlot','-dpng', '-r300');

clearvars I err_I B err_B;

%% Import the data
[~, ~, raw] = xlsread('C:\local\Mipt\Lab\2nd_year\3_3_4\data.xlsx','data');
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

raw = raw(:,[2,3,4,5,6]);

R = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),2); 
raw(R,:) = [];

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
datat = table;

%% Allocate imported array to column variable names
datat.Experement = data(:,1);
datat.CurrentmA = data(:,2);
datat.U_0mkV = data(:,3);
datat.U_34mkV = data(:,4);
datat.I_mA = data(:,5);

clearvars data raw R;
%% Calculate new measurements
datat.UmkV = datat.U_34mkV-datat.U_0mkV;
datat.errU = 5*10^(-5)*datat.UmkV+0.7; 
fitCoef = coeffvalues(f);
temp = datat.I_mA;
datat.BmT = fitCoef(1)*temp.^3+fitCoef(2)*temp.^2+fitCoef(3)*temp+fitCoef(4); 
clearvars temp;
datat.errB = sqrt((datat.BmT.*0.005./datat.CurrentmA).^2+gof.rmse^2);

% Building family of curves
[perExp,expNames] = findgroups(datat.Experement);

% Create figure
figure1 = figure;
axes1 = axes('Parent',figure1);
hold(axes1,'on');

% calculate and draw data
thandle = @(x,y,yerr,xerr)errorbar(x, y,yerr,yerr, xerr,xerr, 'LineStyle','none','CapSize', 0);
splitapply(thandle, datat.BmT, datat.UmkV,datat.errU, datat.errB, perExp);
clearvars thandle;

thandle =@(x,y)mult_fit_and_draw(x,y);
[coeffs, uncert] = splitapply(thandle, datat.BmT, datat.UmkV, perExp); 
errCoef = coeffs - uncert(:,1);
coeft = table;
coeft.Coef = coeffs;
coeft.Error = errCoef;
coeft.Current = splitapply(@mean, datat.CurrentmA, perExp);
clearvars coeffs errCoef uncert
% design
%set(gcf, 'Position', [50,50,1000,500]);

make_fancy('Magnetic Induction [mT]', 'Holls voltage [\muV]', 'Title');

temp = splitapply(@(x)strcat('I=',string(mean(x)),'mA'), datat.CurrentmA, perExp);
temp(end) ='reversed (I=1mA)';
temp1 = cellstr(temp);
coeft.Name = temp1;
legend(temp1,'Location','southwest');

xlim([0,1000]);

clearvars temp temp1;
print('Plot1','-dpng', '-r300');
hold(axes1,'off');

%%
figure2 = figure;
hold on
temp = ones(length(coeft.Current),1).*0.005;
errorbar(coeft.Current(1:end-1), coeft.Coef(1:end-1), coeft.Error(1:end-1), coeft.Error(1:end-1), temp(1:end-1), temp(1:end-1),'LineStyle','none','CapSize', 0);
f = fit(coeft.Current(1:end-1), coeft.Coef(1:end-1), 'poly1');
plot(f);
make_fancy('Current [mA]','k=\DeltaE/\DeltaB [mV/T]','');
xlim([0,1.2]);
ylim([0,1.2]);
legend('Location','northwest');
print('Plot2','-dpng', '-r300');

hold off

subindex = @(x, varargin) x(varargin{:});
k = subindex(coeffvalues(f), 1);

tuncert = confint(f,0.67);
err_k = (tuncert(2,1) - tuncert(1,1))/2
